// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: risk_protocal.proto

#ifndef PROTOBUF_risk_5fprotocal_2eproto__INCLUDED
#define PROTOBUF_risk_5fprotocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace risk {
class cffex_margin_field;
class cffex_margin_fieldDefaultTypeInternal;
extern cffex_margin_fieldDefaultTypeInternal _cffex_margin_field_default_instance_;
class czce_margin_field;
class czce_margin_fieldDefaultTypeInternal;
extern czce_margin_fieldDefaultTypeInternal _czce_margin_field_default_instance_;
class dce_margin_field;
class dce_margin_fieldDefaultTypeInternal;
extern dce_margin_fieldDefaultTypeInternal _dce_margin_field_default_instance_;
class rtn_margin_field;
class rtn_margin_fieldDefaultTypeInternal;
extern rtn_margin_fieldDefaultTypeInternal _rtn_margin_field_default_instance_;
class shfe_margin_field;
class shfe_margin_fieldDefaultTypeInternal;
extern shfe_margin_fieldDefaultTypeInternal _shfe_margin_field_default_instance_;
class subscribe_margin;
class subscribe_marginDefaultTypeInternal;
extern subscribe_marginDefaultTypeInternal _subscribe_margin_default_instance_;
}  // namespace risk

namespace risk {

namespace protobuf_risk_5fprotocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_risk_5fprotocal_2eproto

// ===================================================================

class subscribe_margin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.subscribe_margin) */ {
 public:
  subscribe_margin();
  virtual ~subscribe_margin();

  subscribe_margin(const subscribe_margin& from);

  inline subscribe_margin& operator=(const subscribe_margin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  subscribe_margin(subscribe_margin&& from) noexcept
    : subscribe_margin() {
    *this = ::std::move(from);
  }

  inline subscribe_margin& operator=(subscribe_margin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const subscribe_margin& default_instance();

  static inline const subscribe_margin* internal_default_instance() {
    return reinterpret_cast<const subscribe_margin*>(
               &_subscribe_margin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(subscribe_margin* other);
  friend void swap(subscribe_margin& a, subscribe_margin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline subscribe_margin* New() const PROTOBUF_FINAL { return New(NULL); }

  subscribe_margin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const subscribe_margin& from);
  void MergeFrom(const subscribe_margin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(subscribe_margin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investor = 1;
  void clear_investor();
  static const int kInvestorFieldNumber = 1;
  const ::std::string& investor() const;
  void set_investor(const ::std::string& value);
  #if LANG_CXX11
  void set_investor(::std::string&& value);
  #endif
  void set_investor(const char* value);
  void set_investor(const char* value, size_t size);
  ::std::string* mutable_investor();
  ::std::string* release_investor();
  void set_allocated_investor(::std::string* investor);

  // @@protoc_insertion_point(class_scope:risk.subscribe_margin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investor_;
  mutable int _cached_size_;
  friend struct protobuf_risk_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class shfe_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.shfe_margin_field) */ {
 public:
  shfe_margin_field();
  virtual ~shfe_margin_field();

  shfe_margin_field(const shfe_margin_field& from);

  inline shfe_margin_field& operator=(const shfe_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  shfe_margin_field(shfe_margin_field&& from) noexcept
    : shfe_margin_field() {
    *this = ::std::move(from);
  }

  inline shfe_margin_field& operator=(shfe_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const shfe_margin_field& default_instance();

  static inline const shfe_margin_field* internal_default_instance() {
    return reinterpret_cast<const shfe_margin_field*>(
               &_shfe_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(shfe_margin_field* other);
  friend void swap(shfe_margin_field& a, shfe_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline shfe_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  shfe_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const shfe_margin_field& from);
  void MergeFrom(const shfe_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(shfe_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exchangeid = 1;
  void clear_exchangeid();
  static const int kExchangeidFieldNumber = 1;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeid(::std::string&& value);
  #endif
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // double pre_favorable = 2;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 2;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double speculation_favorable = 3;
  void clear_speculation_favorable();
  static const int kSpeculationFavorableFieldNumber = 3;
  double speculation_favorable() const;
  void set_speculation_favorable(double value);

  // double hedging_favorable = 4;
  void clear_hedging_favorable();
  static const int kHedgingFavorableFieldNumber = 4;
  double hedging_favorable() const;
  void set_hedging_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.shfe_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  double pre_favorable_;
  double speculation_favorable_;
  double hedging_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_risk_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cffex_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.cffex_margin_field) */ {
 public:
  cffex_margin_field();
  virtual ~cffex_margin_field();

  cffex_margin_field(const cffex_margin_field& from);

  inline cffex_margin_field& operator=(const cffex_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cffex_margin_field(cffex_margin_field&& from) noexcept
    : cffex_margin_field() {
    *this = ::std::move(from);
  }

  inline cffex_margin_field& operator=(cffex_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cffex_margin_field& default_instance();

  static inline const cffex_margin_field* internal_default_instance() {
    return reinterpret_cast<const cffex_margin_field*>(
               &_cffex_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(cffex_margin_field* other);
  friend void swap(cffex_margin_field& a, cffex_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cffex_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  cffex_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const cffex_margin_field& from);
  void MergeFrom(const cffex_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(cffex_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exchangeid = 1;
  void clear_exchangeid();
  static const int kExchangeidFieldNumber = 1;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeid(::std::string&& value);
  #endif
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // double pre_favorable = 2;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 2;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double speculation_favorable = 3;
  void clear_speculation_favorable();
  static const int kSpeculationFavorableFieldNumber = 3;
  double speculation_favorable() const;
  void set_speculation_favorable(double value);

  // double hedging_favorable = 4;
  void clear_hedging_favorable();
  static const int kHedgingFavorableFieldNumber = 4;
  double hedging_favorable() const;
  void set_hedging_favorable(double value);

  // double arbitrage_favorable = 5;
  void clear_arbitrage_favorable();
  static const int kArbitrageFavorableFieldNumber = 5;
  double arbitrage_favorable() const;
  void set_arbitrage_favorable(double value);

  // double market_favorable = 6;
  void clear_market_favorable();
  static const int kMarketFavorableFieldNumber = 6;
  double market_favorable() const;
  void set_market_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.cffex_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  double pre_favorable_;
  double speculation_favorable_;
  double hedging_favorable_;
  double arbitrage_favorable_;
  double market_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_risk_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dce_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.dce_margin_field) */ {
 public:
  dce_margin_field();
  virtual ~dce_margin_field();

  dce_margin_field(const dce_margin_field& from);

  inline dce_margin_field& operator=(const dce_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  dce_margin_field(dce_margin_field&& from) noexcept
    : dce_margin_field() {
    *this = ::std::move(from);
  }

  inline dce_margin_field& operator=(dce_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const dce_margin_field& default_instance();

  static inline const dce_margin_field* internal_default_instance() {
    return reinterpret_cast<const dce_margin_field*>(
               &_dce_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(dce_margin_field* other);
  friend void swap(dce_margin_field& a, dce_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline dce_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  dce_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dce_margin_field& from);
  void MergeFrom(const dce_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dce_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exchangeid = 1;
  void clear_exchangeid();
  static const int kExchangeidFieldNumber = 1;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeid(::std::string&& value);
  #endif
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // double pre_favorable = 2;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 2;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double sp_favorable = 3;
  void clear_sp_favorable();
  static const int kSpFavorableFieldNumber = 3;
  double sp_favorable() const;
  void set_sp_favorable(double value);

  // double spc_favorable = 4;
  void clear_spc_favorable();
  static const int kSpcFavorableFieldNumber = 4;
  double spc_favorable() const;
  void set_spc_favorable(double value);

  // double locked_favorable = 5;
  void clear_locked_favorable();
  static const int kLockedFavorableFieldNumber = 5;
  double locked_favorable() const;
  void set_locked_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.dce_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  double pre_favorable_;
  double sp_favorable_;
  double spc_favorable_;
  double locked_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_risk_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class czce_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.czce_margin_field) */ {
 public:
  czce_margin_field();
  virtual ~czce_margin_field();

  czce_margin_field(const czce_margin_field& from);

  inline czce_margin_field& operator=(const czce_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  czce_margin_field(czce_margin_field&& from) noexcept
    : czce_margin_field() {
    *this = ::std::move(from);
  }

  inline czce_margin_field& operator=(czce_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const czce_margin_field& default_instance();

  static inline const czce_margin_field* internal_default_instance() {
    return reinterpret_cast<const czce_margin_field*>(
               &_czce_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(czce_margin_field* other);
  friend void swap(czce_margin_field& a, czce_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline czce_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  czce_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const czce_margin_field& from);
  void MergeFrom(const czce_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(czce_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exchangeid = 1;
  void clear_exchangeid();
  static const int kExchangeidFieldNumber = 1;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeid(::std::string&& value);
  #endif
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // double pre_favorable = 2;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 2;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double spd_favorable = 3;
  void clear_spd_favorable();
  static const int kSpdFavorableFieldNumber = 3;
  double spd_favorable() const;
  void set_spd_favorable(double value);

  // double ips_favorable = 4;
  void clear_ips_favorable();
  static const int kIpsFavorableFieldNumber = 4;
  double ips_favorable() const;
  void set_ips_favorable(double value);

  // double prt_favorable = 5;
  void clear_prt_favorable();
  static const int kPrtFavorableFieldNumber = 5;
  double prt_favorable() const;
  void set_prt_favorable(double value);

  // double std_favorable = 6;
  void clear_std_favorable();
  static const int kStdFavorableFieldNumber = 6;
  double std_favorable() const;
  void set_std_favorable(double value);

  // double stg_favorable = 7;
  void clear_stg_favorable();
  static const int kStgFavorableFieldNumber = 7;
  double stg_favorable() const;
  void set_stg_favorable(double value);

  // double zprt_favorable = 8;
  void clear_zprt_favorable();
  static const int kZprtFavorableFieldNumber = 8;
  double zprt_favorable() const;
  void set_zprt_favorable(double value);

  // double locked_favorable = 9;
  void clear_locked_favorable();
  static const int kLockedFavorableFieldNumber = 9;
  double locked_favorable() const;
  void set_locked_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.czce_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  double pre_favorable_;
  double spd_favorable_;
  double ips_favorable_;
  double prt_favorable_;
  double std_favorable_;
  double stg_favorable_;
  double zprt_favorable_;
  double locked_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_risk_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_margin_field) */ {
 public:
  rtn_margin_field();
  virtual ~rtn_margin_field();

  rtn_margin_field(const rtn_margin_field& from);

  inline rtn_margin_field& operator=(const rtn_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_margin_field(rtn_margin_field&& from) noexcept
    : rtn_margin_field() {
    *this = ::std::move(from);
  }

  inline rtn_margin_field& operator=(rtn_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_margin_field& default_instance();

  static inline const rtn_margin_field* internal_default_instance() {
    return reinterpret_cast<const rtn_margin_field*>(
               &_rtn_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(rtn_margin_field* other);
  friend void swap(rtn_margin_field& a, rtn_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_margin_field& from);
  void MergeFrom(const rtn_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investor = 2;
  void clear_investor();
  static const int kInvestorFieldNumber = 2;
  const ::std::string& investor() const;
  void set_investor(const ::std::string& value);
  #if LANG_CXX11
  void set_investor(::std::string&& value);
  #endif
  void set_investor(const char* value);
  void set_investor(const char* value, size_t size);
  ::std::string* mutable_investor();
  ::std::string* release_investor();
  void set_allocated_investor(::std::string* investor);

  // .risk.shfe_margin_field shfe_margin = 3;
  bool has_shfe_margin() const;
  void clear_shfe_margin();
  static const int kShfeMarginFieldNumber = 3;
  const ::risk::shfe_margin_field& shfe_margin() const;
  ::risk::shfe_margin_field* mutable_shfe_margin();
  ::risk::shfe_margin_field* release_shfe_margin();
  void set_allocated_shfe_margin(::risk::shfe_margin_field* shfe_margin);

  // .risk.cffex_margin_field cffex_margin = 4;
  bool has_cffex_margin() const;
  void clear_cffex_margin();
  static const int kCffexMarginFieldNumber = 4;
  const ::risk::cffex_margin_field& cffex_margin() const;
  ::risk::cffex_margin_field* mutable_cffex_margin();
  ::risk::cffex_margin_field* release_cffex_margin();
  void set_allocated_cffex_margin(::risk::cffex_margin_field* cffex_margin);

  // .risk.dce_margin_field dce_margin = 5;
  bool has_dce_margin() const;
  void clear_dce_margin();
  static const int kDceMarginFieldNumber = 5;
  const ::risk::dce_margin_field& dce_margin() const;
  ::risk::dce_margin_field* mutable_dce_margin();
  ::risk::dce_margin_field* release_dce_margin();
  void set_allocated_dce_margin(::risk::dce_margin_field* dce_margin);

  // .risk.czce_margin_field czce_margin = 6;
  bool has_czce_margin() const;
  void clear_czce_margin();
  static const int kCzceMarginFieldNumber = 6;
  const ::risk::czce_margin_field& czce_margin() const;
  ::risk::czce_margin_field* mutable_czce_margin();
  ::risk::czce_margin_field* release_czce_margin();
  void set_allocated_czce_margin(::risk::czce_margin_field* czce_margin);

  // uint32 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:risk.rtn_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investor_;
  ::risk::shfe_margin_field* shfe_margin_;
  ::risk::cffex_margin_field* cffex_margin_;
  ::risk::dce_margin_field* dce_margin_;
  ::risk::czce_margin_field* czce_margin_;
  ::google::protobuf::uint32 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_risk_5fprotocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// subscribe_margin

// string investor = 1;
inline void subscribe_margin::clear_investor() {
  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& subscribe_margin::investor() const {
  // @@protoc_insertion_point(field_get:risk.subscribe_margin.investor)
  return investor_.GetNoArena();
}
inline void subscribe_margin::set_investor(const ::std::string& value) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.subscribe_margin.investor)
}
#if LANG_CXX11
inline void subscribe_margin::set_investor(::std::string&& value) {
  
  investor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.subscribe_margin.investor)
}
#endif
inline void subscribe_margin::set_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.subscribe_margin.investor)
}
inline void subscribe_margin::set_investor(const char* value, size_t size) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.subscribe_margin.investor)
}
inline ::std::string* subscribe_margin::mutable_investor() {
  
  // @@protoc_insertion_point(field_mutable:risk.subscribe_margin.investor)
  return investor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* subscribe_margin::release_investor() {
  // @@protoc_insertion_point(field_release:risk.subscribe_margin.investor)
  
  return investor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void subscribe_margin::set_allocated_investor(::std::string* investor) {
  if (investor != NULL) {
    
  } else {
    
  }
  investor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor);
  // @@protoc_insertion_point(field_set_allocated:risk.subscribe_margin.investor)
}

// -------------------------------------------------------------------

// shfe_margin_field

// string exchangeid = 1;
inline void shfe_margin_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& shfe_margin_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.exchangeid)
  return exchangeid_.GetNoArena();
}
inline void shfe_margin_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.exchangeid)
}
#if LANG_CXX11
inline void shfe_margin_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.shfe_margin_field.exchangeid)
}
#endif
inline void shfe_margin_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.shfe_margin_field.exchangeid)
}
inline void shfe_margin_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.shfe_margin_field.exchangeid)
}
inline ::std::string* shfe_margin_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.shfe_margin_field.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* shfe_margin_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.shfe_margin_field.exchangeid)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void shfe_margin_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.shfe_margin_field.exchangeid)
}

// double pre_favorable = 2;
inline void shfe_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double shfe_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void shfe_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.pre_favorable)
}

// double speculation_favorable = 3;
inline void shfe_margin_field::clear_speculation_favorable() {
  speculation_favorable_ = 0;
}
inline double shfe_margin_field::speculation_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.speculation_favorable)
  return speculation_favorable_;
}
inline void shfe_margin_field::set_speculation_favorable(double value) {
  
  speculation_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.speculation_favorable)
}

// double hedging_favorable = 4;
inline void shfe_margin_field::clear_hedging_favorable() {
  hedging_favorable_ = 0;
}
inline double shfe_margin_field::hedging_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.hedging_favorable)
  return hedging_favorable_;
}
inline void shfe_margin_field::set_hedging_favorable(double value) {
  
  hedging_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.hedging_favorable)
}

// -------------------------------------------------------------------

// cffex_margin_field

// string exchangeid = 1;
inline void cffex_margin_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& cffex_margin_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.exchangeid)
  return exchangeid_.GetNoArena();
}
inline void cffex_margin_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.exchangeid)
}
#if LANG_CXX11
inline void cffex_margin_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.cffex_margin_field.exchangeid)
}
#endif
inline void cffex_margin_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.cffex_margin_field.exchangeid)
}
inline void cffex_margin_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.cffex_margin_field.exchangeid)
}
inline ::std::string* cffex_margin_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.cffex_margin_field.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cffex_margin_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.cffex_margin_field.exchangeid)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cffex_margin_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.cffex_margin_field.exchangeid)
}

// double pre_favorable = 2;
inline void cffex_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double cffex_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void cffex_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.pre_favorable)
}

// double speculation_favorable = 3;
inline void cffex_margin_field::clear_speculation_favorable() {
  speculation_favorable_ = 0;
}
inline double cffex_margin_field::speculation_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.speculation_favorable)
  return speculation_favorable_;
}
inline void cffex_margin_field::set_speculation_favorable(double value) {
  
  speculation_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.speculation_favorable)
}

// double hedging_favorable = 4;
inline void cffex_margin_field::clear_hedging_favorable() {
  hedging_favorable_ = 0;
}
inline double cffex_margin_field::hedging_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.hedging_favorable)
  return hedging_favorable_;
}
inline void cffex_margin_field::set_hedging_favorable(double value) {
  
  hedging_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.hedging_favorable)
}

// double arbitrage_favorable = 5;
inline void cffex_margin_field::clear_arbitrage_favorable() {
  arbitrage_favorable_ = 0;
}
inline double cffex_margin_field::arbitrage_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.arbitrage_favorable)
  return arbitrage_favorable_;
}
inline void cffex_margin_field::set_arbitrage_favorable(double value) {
  
  arbitrage_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.arbitrage_favorable)
}

// double market_favorable = 6;
inline void cffex_margin_field::clear_market_favorable() {
  market_favorable_ = 0;
}
inline double cffex_margin_field::market_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.market_favorable)
  return market_favorable_;
}
inline void cffex_margin_field::set_market_favorable(double value) {
  
  market_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.market_favorable)
}

// -------------------------------------------------------------------

// dce_margin_field

// string exchangeid = 1;
inline void dce_margin_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& dce_margin_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.exchangeid)
  return exchangeid_.GetNoArena();
}
inline void dce_margin_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.exchangeid)
}
#if LANG_CXX11
inline void dce_margin_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.dce_margin_field.exchangeid)
}
#endif
inline void dce_margin_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.dce_margin_field.exchangeid)
}
inline void dce_margin_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.dce_margin_field.exchangeid)
}
inline ::std::string* dce_margin_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.dce_margin_field.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dce_margin_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.dce_margin_field.exchangeid)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dce_margin_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.dce_margin_field.exchangeid)
}

// double pre_favorable = 2;
inline void dce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double dce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void dce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.pre_favorable)
}

// double sp_favorable = 3;
inline void dce_margin_field::clear_sp_favorable() {
  sp_favorable_ = 0;
}
inline double dce_margin_field::sp_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.sp_favorable)
  return sp_favorable_;
}
inline void dce_margin_field::set_sp_favorable(double value) {
  
  sp_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.sp_favorable)
}

// double spc_favorable = 4;
inline void dce_margin_field::clear_spc_favorable() {
  spc_favorable_ = 0;
}
inline double dce_margin_field::spc_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.spc_favorable)
  return spc_favorable_;
}
inline void dce_margin_field::set_spc_favorable(double value) {
  
  spc_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.spc_favorable)
}

// double locked_favorable = 5;
inline void dce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
inline double dce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.locked_favorable)
  return locked_favorable_;
}
inline void dce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.locked_favorable)
}

// -------------------------------------------------------------------

// czce_margin_field

// string exchangeid = 1;
inline void czce_margin_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& czce_margin_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.exchangeid)
  return exchangeid_.GetNoArena();
}
inline void czce_margin_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.exchangeid)
}
#if LANG_CXX11
inline void czce_margin_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.czce_margin_field.exchangeid)
}
#endif
inline void czce_margin_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.czce_margin_field.exchangeid)
}
inline void czce_margin_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.czce_margin_field.exchangeid)
}
inline ::std::string* czce_margin_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.czce_margin_field.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* czce_margin_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.czce_margin_field.exchangeid)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void czce_margin_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.czce_margin_field.exchangeid)
}

// double pre_favorable = 2;
inline void czce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double czce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void czce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.pre_favorable)
}

// double spd_favorable = 3;
inline void czce_margin_field::clear_spd_favorable() {
  spd_favorable_ = 0;
}
inline double czce_margin_field::spd_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.spd_favorable)
  return spd_favorable_;
}
inline void czce_margin_field::set_spd_favorable(double value) {
  
  spd_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.spd_favorable)
}

// double ips_favorable = 4;
inline void czce_margin_field::clear_ips_favorable() {
  ips_favorable_ = 0;
}
inline double czce_margin_field::ips_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.ips_favorable)
  return ips_favorable_;
}
inline void czce_margin_field::set_ips_favorable(double value) {
  
  ips_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.ips_favorable)
}

// double prt_favorable = 5;
inline void czce_margin_field::clear_prt_favorable() {
  prt_favorable_ = 0;
}
inline double czce_margin_field::prt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.prt_favorable)
  return prt_favorable_;
}
inline void czce_margin_field::set_prt_favorable(double value) {
  
  prt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.prt_favorable)
}

// double std_favorable = 6;
inline void czce_margin_field::clear_std_favorable() {
  std_favorable_ = 0;
}
inline double czce_margin_field::std_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.std_favorable)
  return std_favorable_;
}
inline void czce_margin_field::set_std_favorable(double value) {
  
  std_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.std_favorable)
}

// double stg_favorable = 7;
inline void czce_margin_field::clear_stg_favorable() {
  stg_favorable_ = 0;
}
inline double czce_margin_field::stg_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.stg_favorable)
  return stg_favorable_;
}
inline void czce_margin_field::set_stg_favorable(double value) {
  
  stg_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.stg_favorable)
}

// double zprt_favorable = 8;
inline void czce_margin_field::clear_zprt_favorable() {
  zprt_favorable_ = 0;
}
inline double czce_margin_field::zprt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.zprt_favorable)
  return zprt_favorable_;
}
inline void czce_margin_field::set_zprt_favorable(double value) {
  
  zprt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.zprt_favorable)
}

// double locked_favorable = 9;
inline void czce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
inline double czce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.locked_favorable)
  return locked_favorable_;
}
inline void czce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.locked_favorable)
}

// -------------------------------------------------------------------

// rtn_margin_field

// uint32 timestamp = 1;
inline void rtn_margin_field::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 rtn_margin_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.timestamp)
  return timestamp_;
}
inline void rtn_margin_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.timestamp)
}

// string investor = 2;
inline void rtn_margin_field::clear_investor() {
  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rtn_margin_field::investor() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.investor)
  return investor_.GetNoArena();
}
inline void rtn_margin_field::set_investor(const ::std::string& value) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.investor)
}
#if LANG_CXX11
inline void rtn_margin_field::set_investor(::std::string&& value) {
  
  investor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rtn_margin_field.investor)
}
#endif
inline void rtn_margin_field::set_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rtn_margin_field.investor)
}
inline void rtn_margin_field::set_investor(const char* value, size_t size) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_margin_field.investor)
}
inline ::std::string* rtn_margin_field::mutable_investor() {
  
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.investor)
  return investor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rtn_margin_field::release_investor() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.investor)
  
  return investor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rtn_margin_field::set_allocated_investor(::std::string* investor) {
  if (investor != NULL) {
    
  } else {
    
  }
  investor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor);
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.investor)
}

// .risk.shfe_margin_field shfe_margin = 3;
inline bool rtn_margin_field::has_shfe_margin() const {
  return this != internal_default_instance() && shfe_margin_ != NULL;
}
inline void rtn_margin_field::clear_shfe_margin() {
  if (GetArenaNoVirtual() == NULL && shfe_margin_ != NULL) delete shfe_margin_;
  shfe_margin_ = NULL;
}
inline const ::risk::shfe_margin_field& rtn_margin_field::shfe_margin() const {
  const ::risk::shfe_margin_field* p = shfe_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.shfe_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::shfe_margin_field*>(
      &::risk::_shfe_margin_field_default_instance_);
}
inline ::risk::shfe_margin_field* rtn_margin_field::mutable_shfe_margin() {
  
  if (shfe_margin_ == NULL) {
    shfe_margin_ = new ::risk::shfe_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.shfe_margin)
  return shfe_margin_;
}
inline ::risk::shfe_margin_field* rtn_margin_field::release_shfe_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.shfe_margin)
  
  ::risk::shfe_margin_field* temp = shfe_margin_;
  shfe_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_shfe_margin(::risk::shfe_margin_field* shfe_margin) {
  delete shfe_margin_;
  shfe_margin_ = shfe_margin;
  if (shfe_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.shfe_margin)
}

// .risk.cffex_margin_field cffex_margin = 4;
inline bool rtn_margin_field::has_cffex_margin() const {
  return this != internal_default_instance() && cffex_margin_ != NULL;
}
inline void rtn_margin_field::clear_cffex_margin() {
  if (GetArenaNoVirtual() == NULL && cffex_margin_ != NULL) delete cffex_margin_;
  cffex_margin_ = NULL;
}
inline const ::risk::cffex_margin_field& rtn_margin_field::cffex_margin() const {
  const ::risk::cffex_margin_field* p = cffex_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.cffex_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::cffex_margin_field*>(
      &::risk::_cffex_margin_field_default_instance_);
}
inline ::risk::cffex_margin_field* rtn_margin_field::mutable_cffex_margin() {
  
  if (cffex_margin_ == NULL) {
    cffex_margin_ = new ::risk::cffex_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.cffex_margin)
  return cffex_margin_;
}
inline ::risk::cffex_margin_field* rtn_margin_field::release_cffex_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.cffex_margin)
  
  ::risk::cffex_margin_field* temp = cffex_margin_;
  cffex_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_cffex_margin(::risk::cffex_margin_field* cffex_margin) {
  delete cffex_margin_;
  cffex_margin_ = cffex_margin;
  if (cffex_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.cffex_margin)
}

// .risk.dce_margin_field dce_margin = 5;
inline bool rtn_margin_field::has_dce_margin() const {
  return this != internal_default_instance() && dce_margin_ != NULL;
}
inline void rtn_margin_field::clear_dce_margin() {
  if (GetArenaNoVirtual() == NULL && dce_margin_ != NULL) delete dce_margin_;
  dce_margin_ = NULL;
}
inline const ::risk::dce_margin_field& rtn_margin_field::dce_margin() const {
  const ::risk::dce_margin_field* p = dce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.dce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::dce_margin_field*>(
      &::risk::_dce_margin_field_default_instance_);
}
inline ::risk::dce_margin_field* rtn_margin_field::mutable_dce_margin() {
  
  if (dce_margin_ == NULL) {
    dce_margin_ = new ::risk::dce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.dce_margin)
  return dce_margin_;
}
inline ::risk::dce_margin_field* rtn_margin_field::release_dce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.dce_margin)
  
  ::risk::dce_margin_field* temp = dce_margin_;
  dce_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_dce_margin(::risk::dce_margin_field* dce_margin) {
  delete dce_margin_;
  dce_margin_ = dce_margin;
  if (dce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.dce_margin)
}

// .risk.czce_margin_field czce_margin = 6;
inline bool rtn_margin_field::has_czce_margin() const {
  return this != internal_default_instance() && czce_margin_ != NULL;
}
inline void rtn_margin_field::clear_czce_margin() {
  if (GetArenaNoVirtual() == NULL && czce_margin_ != NULL) delete czce_margin_;
  czce_margin_ = NULL;
}
inline const ::risk::czce_margin_field& rtn_margin_field::czce_margin() const {
  const ::risk::czce_margin_field* p = czce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.czce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::czce_margin_field*>(
      &::risk::_czce_margin_field_default_instance_);
}
inline ::risk::czce_margin_field* rtn_margin_field::mutable_czce_margin() {
  
  if (czce_margin_ == NULL) {
    czce_margin_ = new ::risk::czce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.czce_margin)
  return czce_margin_;
}
inline ::risk::czce_margin_field* rtn_margin_field::release_czce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.czce_margin)
  
  ::risk::czce_margin_field* temp = czce_margin_;
  czce_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_czce_margin(::risk::czce_margin_field* czce_margin) {
  delete czce_margin_;
  czce_margin_ = czce_margin;
  if (czce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.czce_margin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace risk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_risk_5fprotocal_2eproto__INCLUDED
