// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zeta {
class login_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<login_info>
     _instance;
} _login_info_default_instance_;
class logout_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<logout_info>
     _instance;
} _logout_info_default_instance_;

namespace protobuf_protocal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_info, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_info, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_info, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_info, record_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_info, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_info, userid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(login_info)},
  { 9, -1, sizeof(logout_info)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_login_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_logout_info_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::zeta::protobuf_basehead_2eproto::InitDefaults();
  _login_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_login_info_default_instance_);_logout_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_logout_info_default_instance_);_login_info_default_instance_._instance.get_mutable()->head_ = const_cast< ::zeta::message_head*>(
      ::zeta::message_head::internal_default_instance());
  _logout_info_default_instance_._instance.get_mutable()->head_ = const_cast< ::zeta::message_head*>(
      ::zeta::message_head::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016protocal.proto\022\004zeta\032\016basehead.proto\"["
      "\n\nlogin_info\022 \n\004head\030\001 \001(\0132\022.zeta.messag"
      "e_head\022\016\n\006userid\030\002 \001(\005\022\013\n\003pwd\030\003 \001(\t\022\016\n\006r"
      "ecord\030\004 \003(\t\"\?\n\013logout_info\022 \n\004head\030\001 \001(\013"
      "2\022.zeta.message_head\022\016\n\006userid\030\002 \001(\005b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocal.proto", &protobuf_RegisterTypes);
  ::zeta::protobuf_basehead_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocal_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login_info::kHeadFieldNumber;
const int login_info::kUseridFieldNumber;
const int login_info::kPwdFieldNumber;
const int login_info::kRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login_info::login_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zeta.login_info)
}
login_info::login_info(const login_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      record_(from.record_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.has_head()) {
    head_ = new ::zeta::message_head(*from.head_);
  } else {
    head_ = NULL;
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:zeta.login_info)
}

void login_info::SharedCtor() {
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&head_)) + sizeof(userid_));
  _cached_size_ = 0;
}

login_info::~login_info() {
  // @@protoc_insertion_point(destructor:zeta.login_info)
  SharedDtor();
}

void login_info::SharedDtor() {
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_;
}

void login_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_info::descriptor() {
  protobuf_protocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const login_info& login_info::default_instance() {
  protobuf_protocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

login_info* login_info::New(::google::protobuf::Arena* arena) const {
  login_info* n = new login_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void login_info::Clear() {
// @@protoc_insertion_point(message_clear_start:zeta.login_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_.Clear();
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  userid_ = 0;
  _internal_metadata_.Clear();
}

bool login_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zeta.login_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zeta.message_head head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zeta.login_info.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string record = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record(this->record_size() - 1).data(),
            static_cast<int>(this->record(this->record_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zeta.login_info.record"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zeta.login_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zeta.login_info)
  return false;
#undef DO_
}

void login_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zeta.login_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zeta.message_head head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zeta.login_info.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // repeated string record = 4;
  for (int i = 0, n = this->record_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record(i).data(), static_cast<int>(this->record(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zeta.login_info.record");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->record(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zeta.login_info)
}

::google::protobuf::uint8* login_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zeta.login_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zeta.message_head head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zeta.login_info.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // repeated string record = 4;
  for (int i = 0, n = this->record_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record(i).data(), static_cast<int>(this->record(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zeta.login_info.record");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->record(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zeta.login_info)
  return target;
}

size_t login_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zeta.login_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string record = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->record_size());
  for (int i = 0, n = this->record_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->record(i));
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // .zeta.message_head head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zeta.login_info)
  GOOGLE_DCHECK_NE(&from, this);
  const login_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const login_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zeta.login_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zeta.login_info)
    MergeFrom(*source);
  }
}

void login_info::MergeFrom(const login_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zeta.login_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_.MergeFrom(from.record_);
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.has_head()) {
    mutable_head()->::zeta::message_head::MergeFrom(from.head());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void login_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zeta.login_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_info::CopyFrom(const login_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zeta.login_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_info::IsInitialized() const {
  return true;
}

void login_info::Swap(login_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_info::InternalSwap(login_info* other) {
  using std::swap;
  record_.InternalSwap(&other->record_);
  pwd_.Swap(&other->pwd_);
  swap(head_, other->head_);
  swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata login_info::GetMetadata() const {
  protobuf_protocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// login_info

// .zeta.message_head head = 1;
bool login_info::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void login_info::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::zeta::message_head& login_info::head() const {
  const ::zeta::message_head* p = head_;
  // @@protoc_insertion_point(field_get:zeta.login_info.head)
  return p != NULL ? *p : *reinterpret_cast<const ::zeta::message_head*>(
      &::zeta::_message_head_default_instance_);
}
::zeta::message_head* login_info::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::zeta::message_head;
  }
  // @@protoc_insertion_point(field_mutable:zeta.login_info.head)
  return head_;
}
::zeta::message_head* login_info::release_head() {
  // @@protoc_insertion_point(field_release:zeta.login_info.head)
  
  ::zeta::message_head* temp = head_;
  head_ = NULL;
  return temp;
}
void login_info::set_allocated_head(::zeta::message_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zeta.login_info.head)
}

// int32 userid = 2;
void login_info::clear_userid() {
  userid_ = 0;
}
::google::protobuf::int32 login_info::userid() const {
  // @@protoc_insertion_point(field_get:zeta.login_info.userid)
  return userid_;
}
void login_info::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:zeta.login_info.userid)
}

// string pwd = 3;
void login_info::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& login_info::pwd() const {
  // @@protoc_insertion_point(field_get:zeta.login_info.pwd)
  return pwd_.GetNoArena();
}
void login_info::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zeta.login_info.pwd)
}
#if LANG_CXX11
void login_info::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zeta.login_info.pwd)
}
#endif
void login_info::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zeta.login_info.pwd)
}
void login_info::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zeta.login_info.pwd)
}
::std::string* login_info::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:zeta.login_info.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* login_info::release_pwd() {
  // @@protoc_insertion_point(field_release:zeta.login_info.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void login_info::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:zeta.login_info.pwd)
}

// repeated string record = 4;
int login_info::record_size() const {
  return record_.size();
}
void login_info::clear_record() {
  record_.Clear();
}
const ::std::string& login_info::record(int index) const {
  // @@protoc_insertion_point(field_get:zeta.login_info.record)
  return record_.Get(index);
}
::std::string* login_info::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:zeta.login_info.record)
  return record_.Mutable(index);
}
void login_info::set_record(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zeta.login_info.record)
  record_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void login_info::set_record(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zeta.login_info.record)
  record_.Mutable(index)->assign(std::move(value));
}
#endif
void login_info::set_record(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zeta.login_info.record)
}
void login_info::set_record(int index, const char* value, size_t size) {
  record_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zeta.login_info.record)
}
::std::string* login_info::add_record() {
  // @@protoc_insertion_point(field_add_mutable:zeta.login_info.record)
  return record_.Add();
}
void login_info::add_record(const ::std::string& value) {
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zeta.login_info.record)
}
#if LANG_CXX11
void login_info::add_record(::std::string&& value) {
  record_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zeta.login_info.record)
}
#endif
void login_info::add_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zeta.login_info.record)
}
void login_info::add_record(const char* value, size_t size) {
  record_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zeta.login_info.record)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
login_info::record() const {
  // @@protoc_insertion_point(field_list:zeta.login_info.record)
  return record_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
login_info::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:zeta.login_info.record)
  return &record_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int logout_info::kHeadFieldNumber;
const int logout_info::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

logout_info::logout_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zeta.logout_info)
}
logout_info::logout_info(const logout_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::zeta::message_head(*from.head_);
  } else {
    head_ = NULL;
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:zeta.logout_info)
}

void logout_info::SharedCtor() {
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&head_)) + sizeof(userid_));
  _cached_size_ = 0;
}

logout_info::~logout_info() {
  // @@protoc_insertion_point(destructor:zeta.logout_info)
  SharedDtor();
}

void logout_info::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void logout_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logout_info::descriptor() {
  protobuf_protocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const logout_info& logout_info::default_instance() {
  protobuf_protocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

logout_info* logout_info::New(::google::protobuf::Arena* arena) const {
  logout_info* n = new logout_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void logout_info::Clear() {
// @@protoc_insertion_point(message_clear_start:zeta.logout_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  userid_ = 0;
  _internal_metadata_.Clear();
}

bool logout_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zeta.logout_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zeta.message_head head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zeta.logout_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zeta.logout_info)
  return false;
#undef DO_
}

void logout_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zeta.logout_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zeta.message_head head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zeta.logout_info)
}

::google::protobuf::uint8* logout_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zeta.logout_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zeta.message_head head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zeta.logout_info)
  return target;
}

size_t logout_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zeta.logout_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .zeta.message_head head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logout_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zeta.logout_info)
  GOOGLE_DCHECK_NE(&from, this);
  const logout_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const logout_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zeta.logout_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zeta.logout_info)
    MergeFrom(*source);
  }
}

void logout_info::MergeFrom(const logout_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zeta.logout_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::zeta::message_head::MergeFrom(from.head());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void logout_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zeta.logout_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logout_info::CopyFrom(const logout_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zeta.logout_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logout_info::IsInitialized() const {
  return true;
}

void logout_info::Swap(logout_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void logout_info::InternalSwap(logout_info* other) {
  using std::swap;
  swap(head_, other->head_);
  swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata logout_info::GetMetadata() const {
  protobuf_protocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// logout_info

// .zeta.message_head head = 1;
bool logout_info::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void logout_info::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::zeta::message_head& logout_info::head() const {
  const ::zeta::message_head* p = head_;
  // @@protoc_insertion_point(field_get:zeta.logout_info.head)
  return p != NULL ? *p : *reinterpret_cast<const ::zeta::message_head*>(
      &::zeta::_message_head_default_instance_);
}
::zeta::message_head* logout_info::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::zeta::message_head;
  }
  // @@protoc_insertion_point(field_mutable:zeta.logout_info.head)
  return head_;
}
::zeta::message_head* logout_info::release_head() {
  // @@protoc_insertion_point(field_release:zeta.logout_info.head)
  
  ::zeta::message_head* temp = head_;
  head_ = NULL;
  return temp;
}
void logout_info::set_allocated_head(::zeta::message_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zeta.logout_info.head)
}

// int32 userid = 2;
void logout_info::clear_userid() {
  userid_ = 0;
}
::google::protobuf::int32 logout_info::userid() const {
  // @@protoc_insertion_point(field_get:zeta.logout_info.userid)
  return userid_;
}
void logout_info::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:zeta.logout_info.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zeta

// @@protoc_insertion_point(global_scope)
