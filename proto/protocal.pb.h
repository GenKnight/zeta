// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocal.proto

#ifndef PROTOBUF_protocal_2eproto__INCLUDED
#define PROTOBUF_protocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basehead.pb.h"
// @@protoc_insertion_point(includes)
namespace zeta {
class login_info;
class login_infoDefaultTypeInternal;
extern login_infoDefaultTypeInternal _login_info_default_instance_;
class logout_info;
class logout_infoDefaultTypeInternal;
extern logout_infoDefaultTypeInternal _logout_info_default_instance_;
}  // namespace zeta

namespace zeta {

namespace protobuf_protocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_protocal_2eproto

// ===================================================================

class login_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zeta.login_info) */ {
 public:
  login_info();
  virtual ~login_info();

  login_info(const login_info& from);

  inline login_info& operator=(const login_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  login_info(login_info&& from) noexcept
    : login_info() {
    *this = ::std::move(from);
  }

  inline login_info& operator=(login_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const login_info& default_instance();

  static inline const login_info* internal_default_instance() {
    return reinterpret_cast<const login_info*>(
               &_login_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(login_info* other);
  friend void swap(login_info& a, login_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline login_info* New() const PROTOBUF_FINAL { return New(NULL); }

  login_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const login_info& from);
  void MergeFrom(const login_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(login_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string record = 4;
  int record_size() const;
  void clear_record();
  static const int kRecordFieldNumber = 4;
  const ::std::string& record(int index) const;
  ::std::string* mutable_record(int index);
  void set_record(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_record(int index, ::std::string&& value);
  #endif
  void set_record(int index, const char* value);
  void set_record(int index, const char* value, size_t size);
  ::std::string* add_record();
  void add_record(const ::std::string& value);
  #if LANG_CXX11
  void add_record(::std::string&& value);
  #endif
  void add_record(const char* value);
  void add_record(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& record() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_record();

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // .zeta.message_head head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::zeta::message_head& head() const;
  ::zeta::message_head* mutable_head();
  ::zeta::message_head* release_head();
  void set_allocated_head(::zeta::message_head* head);

  // int32 userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zeta.login_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> record_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::zeta::message_head* head_;
  ::google::protobuf::int32 userid_;
  mutable int _cached_size_;
  friend struct protobuf_protocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class logout_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zeta.logout_info) */ {
 public:
  logout_info();
  virtual ~logout_info();

  logout_info(const logout_info& from);

  inline logout_info& operator=(const logout_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  logout_info(logout_info&& from) noexcept
    : logout_info() {
    *this = ::std::move(from);
  }

  inline logout_info& operator=(logout_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const logout_info& default_instance();

  static inline const logout_info* internal_default_instance() {
    return reinterpret_cast<const logout_info*>(
               &_logout_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(logout_info* other);
  friend void swap(logout_info& a, logout_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline logout_info* New() const PROTOBUF_FINAL { return New(NULL); }

  logout_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const logout_info& from);
  void MergeFrom(const logout_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(logout_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zeta.message_head head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::zeta::message_head& head() const;
  ::zeta::message_head* mutable_head();
  ::zeta::message_head* release_head();
  void set_allocated_head(::zeta::message_head* head);

  // int32 userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zeta.logout_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zeta::message_head* head_;
  ::google::protobuf::int32 userid_;
  mutable int _cached_size_;
  friend struct protobuf_protocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// login_info

// .zeta.message_head head = 1;
inline bool login_info::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void login_info::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::zeta::message_head& login_info::head() const {
  const ::zeta::message_head* p = head_;
  // @@protoc_insertion_point(field_get:zeta.login_info.head)
  return p != NULL ? *p : *reinterpret_cast<const ::zeta::message_head*>(
      &::zeta::_message_head_default_instance_);
}
inline ::zeta::message_head* login_info::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::zeta::message_head;
  }
  // @@protoc_insertion_point(field_mutable:zeta.login_info.head)
  return head_;
}
inline ::zeta::message_head* login_info::release_head() {
  // @@protoc_insertion_point(field_release:zeta.login_info.head)
  
  ::zeta::message_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void login_info::set_allocated_head(::zeta::message_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zeta.login_info.head)
}

// int32 userid = 2;
inline void login_info::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 login_info::userid() const {
  // @@protoc_insertion_point(field_get:zeta.login_info.userid)
  return userid_;
}
inline void login_info::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:zeta.login_info.userid)
}

// string pwd = 3;
inline void login_info::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_info::pwd() const {
  // @@protoc_insertion_point(field_get:zeta.login_info.pwd)
  return pwd_.GetNoArena();
}
inline void login_info::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zeta.login_info.pwd)
}
#if LANG_CXX11
inline void login_info::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zeta.login_info.pwd)
}
#endif
inline void login_info::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zeta.login_info.pwd)
}
inline void login_info::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zeta.login_info.pwd)
}
inline ::std::string* login_info::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:zeta.login_info.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_info::release_pwd() {
  // @@protoc_insertion_point(field_release:zeta.login_info.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_info::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:zeta.login_info.pwd)
}

// repeated string record = 4;
inline int login_info::record_size() const {
  return record_.size();
}
inline void login_info::clear_record() {
  record_.Clear();
}
inline const ::std::string& login_info::record(int index) const {
  // @@protoc_insertion_point(field_get:zeta.login_info.record)
  return record_.Get(index);
}
inline ::std::string* login_info::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:zeta.login_info.record)
  return record_.Mutable(index);
}
inline void login_info::set_record(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zeta.login_info.record)
  record_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void login_info::set_record(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zeta.login_info.record)
  record_.Mutable(index)->assign(std::move(value));
}
#endif
inline void login_info::set_record(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zeta.login_info.record)
}
inline void login_info::set_record(int index, const char* value, size_t size) {
  record_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zeta.login_info.record)
}
inline ::std::string* login_info::add_record() {
  // @@protoc_insertion_point(field_add_mutable:zeta.login_info.record)
  return record_.Add();
}
inline void login_info::add_record(const ::std::string& value) {
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zeta.login_info.record)
}
#if LANG_CXX11
inline void login_info::add_record(::std::string&& value) {
  record_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zeta.login_info.record)
}
#endif
inline void login_info::add_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zeta.login_info.record)
}
inline void login_info::add_record(const char* value, size_t size) {
  record_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zeta.login_info.record)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
login_info::record() const {
  // @@protoc_insertion_point(field_list:zeta.login_info.record)
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
login_info::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:zeta.login_info.record)
  return &record_;
}

// -------------------------------------------------------------------

// logout_info

// .zeta.message_head head = 1;
inline bool logout_info::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void logout_info::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::zeta::message_head& logout_info::head() const {
  const ::zeta::message_head* p = head_;
  // @@protoc_insertion_point(field_get:zeta.logout_info.head)
  return p != NULL ? *p : *reinterpret_cast<const ::zeta::message_head*>(
      &::zeta::_message_head_default_instance_);
}
inline ::zeta::message_head* logout_info::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::zeta::message_head;
  }
  // @@protoc_insertion_point(field_mutable:zeta.logout_info.head)
  return head_;
}
inline ::zeta::message_head* logout_info::release_head() {
  // @@protoc_insertion_point(field_release:zeta.logout_info.head)
  
  ::zeta::message_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void logout_info::set_allocated_head(::zeta::message_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zeta.logout_info.head)
}

// int32 userid = 2;
inline void logout_info::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 logout_info::userid() const {
  // @@protoc_insertion_point(field_get:zeta.logout_info.userid)
  return userid_;
}
inline void logout_info::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:zeta.logout_info.userid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace zeta

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocal_2eproto__INCLUDED
