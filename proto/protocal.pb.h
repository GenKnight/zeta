// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocal.proto

#ifndef PROTOBUF_protocal_2eproto__INCLUDED
#define PROTOBUF_protocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "basehead.pb.h"
// @@protoc_insertion_point(includes)

namespace zeta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocal_2eproto();
void protobuf_AssignDesc_protocal_2eproto();
void protobuf_ShutdownFile_protocal_2eproto();

class login_info;
class logout_info;

// ===================================================================

class login_info : public ::google::protobuf::Message {
 public:
  login_info();
  virtual ~login_info();

  login_info(const login_info& from);

  inline login_info& operator=(const login_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_info& default_instance();

  void Swap(login_info* other);

  // implements Message ----------------------------------------------

  login_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_info& from);
  void MergeFrom(const login_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .zeta.message_head head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::zeta::message_head& head() const;
  inline ::zeta::message_head* mutable_head();
  inline ::zeta::message_head* release_head();
  inline void set_allocated_head(::zeta::message_head* head);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string pwd = 3;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 3;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:zeta.login_info)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zeta::message_head* head_;
  ::std::string* pwd_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();

  void InitAsDefaultInstance();
  static login_info* default_instance_;
};
// -------------------------------------------------------------------

class logout_info : public ::google::protobuf::Message {
 public:
  logout_info();
  virtual ~logout_info();

  logout_info(const logout_info& from);

  inline logout_info& operator=(const logout_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logout_info& default_instance();

  void Swap(logout_info* other);

  // implements Message ----------------------------------------------

  logout_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const logout_info& from);
  void MergeFrom(const logout_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .zeta.message_head head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::zeta::message_head& head() const;
  inline ::zeta::message_head* mutable_head();
  inline ::zeta::message_head* release_head();
  inline void set_allocated_head(::zeta::message_head* head);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zeta.logout_info)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::zeta::message_head* head_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocal_2eproto();
  friend void protobuf_AssignDesc_protocal_2eproto();
  friend void protobuf_ShutdownFile_protocal_2eproto();

  void InitAsDefaultInstance();
  static logout_info* default_instance_;
};
// ===================================================================


// ===================================================================

// login_info

// required .zeta.message_head head = 1;
inline bool login_info::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_info::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_info::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_info::clear_head() {
  if (head_ != NULL) head_->::zeta::message_head::Clear();
  clear_has_head();
}
inline const ::zeta::message_head& login_info::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::zeta::message_head* login_info::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::zeta::message_head;
  return head_;
}
inline ::zeta::message_head* login_info::release_head() {
  clear_has_head();
  ::zeta::message_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void login_info::set_allocated_head(::zeta::message_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// optional int32 userid = 2;
inline bool login_info::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_info::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_info::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 login_info::userid() const {
  return userid_;
}
inline void login_info::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string pwd = 3;
inline bool login_info::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void login_info::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void login_info::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void login_info::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& login_info::pwd() const {
  return *pwd_;
}
inline void login_info::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void login_info::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void login_info::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* login_info::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* login_info::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void login_info::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// logout_info

// required .zeta.message_head head = 1;
inline bool logout_info::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logout_info::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void logout_info::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void logout_info::clear_head() {
  if (head_ != NULL) head_->::zeta::message_head::Clear();
  clear_has_head();
}
inline const ::zeta::message_head& logout_info::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::zeta::message_head* logout_info::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::zeta::message_head;
  return head_;
}
inline ::zeta::message_head* logout_info::release_head() {
  clear_has_head();
  ::zeta::message_head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void logout_info::set_allocated_head(::zeta::message_head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// optional int32 userid = 2;
inline bool logout_info::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void logout_info::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void logout_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void logout_info::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 logout_info::userid() const {
  return userid_;
}
inline void logout_info::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zeta

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocal_2eproto__INCLUDED
